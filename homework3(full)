// kucherin21.02.20.cpp: определяет точку входа для консольного приложения.
//

#include <stdafx.h>
#include <iostream>
#include <math.h>
#include <fstream>
#include <stdio.h>

void input(int** a, int** b, int& n, int& m, int bn[]);
void output(int** a, int n, int m);
void transp1(int** a, int n);
void transp2(int** a, int n, int** c);
void transp3(int** a, int** c, int n, int m);
void summatric(int** a, int** b, int** c, int n, int m);
void proizvmatr(int** a, int** b, int** c, int n, int m);
void proizvmatrvect(int** a, int bn[], int** c, int n, int m);
void proizvmatrchisl(int** a, int r, int** c, int n, int m);
void swapstr(int** a, int n, int m, int& k);
void sumstrokposit(int** a, int n, int m);

using namespace std;


int main()
{
	setlocale(LC_ALL, "Russian");
	int i, j, n, m, z, r, k = 0;

	ifstream F1;
	ifstream F2;
	ofstream F3;

	int** a;
	int** b;
	int** c;
	F1.open("E:\\языки программирования\\9 lab2-двумерные массивы\\matric.txt", ios::in);
	F1 >> n >> m;
	a = new int* [n];
	b = new int* [n];
	c = new int* [n];
	int* bn = new int[n];
	for (i = 0; i < n; i++)
	{
		c[i] = new int[m];
		a[i] = new int[m];
		b[i] = new int[m];
	}
	input(a, b, n, m, bn);

	/*
	cout << "zadanie1" << endl; // транспонирование матриц

	cout << "первоначальная матрица a" << endl;
	output(a, n, m);

	cout << "первоначальная матрица b" << endl;
	output(b, n, m);

	if (n == m)
	{
		cout << "выберите вариант транспонирования матрицы:" << endl;
		cout << "1 - транспонировать матрицу a" << endl;
		cout << "2 - транспонировать матрицу a, результат записать в новую матрицу с" << endl;
		cin >> z;
		cout << endl;
		if (z == 1)
		{
			cout << "транспонированная матрица" << endl;
			transp1(a, n);
			output(a, n, m);
		}
		if (z == 2)
		{
			cout << "транспонированная матрица" << endl;
			transp2(a, n, c);
			output(c, n, m);
		}
	}
	else
	{
		cout << "матрица не является квадратной" << endl;
		delete[] c;

		int** c;
		c = new int* [m];
		for (i = 0; i < m; i++)
		{
			c[i] = new int[n];
		}
		cout << "транспонированная матрица" << endl;
		transp3(a, c, n, m);
		output(c, m, n);
	}


	cout << "zadanie2" << endl; // сложение матриц

	cout << "первоначальная матрица a" << endl;
	output(a, n, m);

	cout << "первоначальная матрица b" << endl;
	output(b, n, m);

	summatric(a, b, c, n, m);
	cout << "матрица, равная сумме матриц" << endl;
	output(c, n, m);
	cout << endl;


	cout << "zadanie3" << endl; // произведение матриц

	cout << "первоначальная матрица a" << endl;
	output(a, n, m);

	cout << "первоначальная матрица b" << endl;
	output(b, n, m);

	if (n == m)
	{
		cout << "матрица, равная произведению матриц" << endl;
		proizvmatr(a, b, c, n, m);
		output(c, n, m);
		cout << endl;
	}
	else
	{
		cout << "матрицы нельзя перемножить" << endl;
	}


	cout << "zadanie4" << endl; // произведение матрицы и вектора

	cout << "первоначальная матрица a" << endl;
	output(a, n, m);

	cout << "матрица, равная произведению матрицы a на вектор bn" << endl;
	proizvmatrvect(a, bn, c, n, m);
	output(c, n, m);


	cout << "zadanie5" << endl; // произведение матрицы на число

	cout << "первоначальная матрица a" << endl;
	output(a, n, m);

	cout << "число r = ";
	cin >> r;
	cout << "матрица, равная произведению матрицы a на число r" << endl;
	proizvmatrchisl(a, r, c, n, m);
	output(c, n, m);
	*/

	cout << "задание 1var" << endl; // Вариант 6

	cout << "первоначальная матрица a" << endl;
	output(a, n, m);

	sumstrokposit(a, n, m);
	cout  << endl;


	cout << "zadanie2var" << endl; // поменять местами строки, в которых находятся первый и последний минимальные элементы
	
	cout << "первоначальная матрица a" << endl;
	output(a, n, m);

	swapstr(a, n, m, k);
	cout << "измененная матрица a" << endl;
	output(a, n, m);


	return 0;
}


void input(int** a, int** b, int& n, int& m, int bn[])  // функция считывает данные из файла и заполняет 2 массива и 1 вектор
{
	ifstream F1;
	F1.open("E:\\языки программирования\\9 lab2-двумерные массивы\\matric.txt", ios::in);

	F1 >> n >> m; // считывание данных о размерности двух массивов 
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			F1 >> a[i][j]; // считывание данных в 1й массив
		}
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			F1 >> b[i][j]; // считывание данных в 2й массив
		}
	}
	for (int i = 0; i < n; i++)
	{
		F1 >> bn[i]; // считывание данных в вектор
	}
	F1.close();
} // end input

void output(int** a, int n, int m)  // функция выводит двумерный массив
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			printf("%5d ", a[i][j]);
		}
		cout << endl;
	}
	cout << endl;
} // end output

void transp1(int** a, int n) // функция транспонирует матрицу
{
	int temp; // temp - число, необходимое для перемены элементов a[i][j] и a[j][i] местами

	for (int i = 0; i < n - 1; i++) // i - количество строк в матрице
	{
		for (int j = i + 1; j < n; j++) // j - количество столбцов в матрице
		{
			temp = a[i][j];
			a[i][j] = a[j][i];
			a[j][i] = temp;
		}
	}
} // end transp1

void transp2(int** a, int n, int** c) // функция транспонирует матрицу, путем введения новой матрицы
{
	int temp; // temp - число, необходимое для перемены элементов c[i][j] и c[j][i] местами
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
			c[i][j] = a[i][j];
	}
	for (int i = 0; i < n - 1; i++)
	{
		for (int j = i + 1; j < n; j++)
		{
			temp = c[i][j];
			c[i][j] = c[j][i];
			c[j][i] = temp;
		}
	}
} // end transp2

void transp3(int** a, int** c, int n, int m) // функция транспонирует любую матрицу
{
	for (int i = 0; i < m; i++) // i - количество строк в матрице
	{
		for (int j = 0; j < n; j++) // j - количество столбцов в матрице
		{
			c[i][j] = a[j][i];  // транспонирование столбцов матрицы a[][] в строки матрицы c[][]
		}
	}
} // end transp3

void summatric(int** a, int** b, int** c, int n, int m) // функция суммирует две матрицы
{
	for (int i = 0; i < n; i++) // i - количество строк в матрице
	{
		for (int j = 0; j < m; j++) // j - количество столбцов в матрице
		{
			c[i][j] = a[i][j] + b[i][j];
		}
	}
} // end summatric

void proizvmatr(int** a, int** b, int** c, int n, int m) // функция перемножает две матрицы
{
	for (int i = 0; i < n; i++) // i - количество строк в матрице
	{
		for (int j = 0; j < m; j++) // j - количество столбцов в матрице
		{
			c[i][j] = 0;
			for (int t = 0; t < m; t++)
			{
				c[i][j] += (a[i][t] * b[t][j]);
			}
		}
	}
} // end proizvmatr

void proizvmatrvect(int** a, int bn[], int** c, int n, int m) // функция перемножает матрицу и вектор
{
	for (int i = 0; i < n; i++) // i - количество строк в матрице
	{
		for (int j = 0; j < m; j++) // j - количество столбцов в матрице
		{
			c[i][j] = 0;
			c[i][j] = a[i][j] * bn[i];
		}
	}
} // end proizvmatrvect

void proizvmatrchisl(int** a, int r, int** c, int n, int m)
{
	for (int i = 0; i < n; i++) // i - количество строк в матрице
		for (int j = 0; j < m; j++) // j - количество столбцов в матрице
		{
			c[i][j] = a[i][j] * r;
		}
} // end proizvmatrchisl


void swapstr(int** a, int n, int m, int& k) // функция меняет первый и последний минимальные элементы местами
{
	int max = a[0][0], min = a[0][0], num_max = 0, num_min = 0, temp;
	// max, min - минимальный и максимальный элементы
	// num_max, num_min - номера максимального и минимального элементов
	// temp - переменная, необходимая, для замены строк с первым и последним минимальными элементами

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (a[i][j] < min) // нахождение первого (самого наименьшего) минимального элемнта
			{
				min = a[i][j];
				num_min = i;
			}
			if (a[i][j] > max) // нахождение последнего (самого наибольшего) минимального элемнта
			{
				max = a[i][j];
				num_max = i;
			}
		}
	}
	if (num_max == num_min)
	{
		cout << "Первый и последний минимальные элементы находятся в одной строке." << endl;
		k = 0;
	}
	else
	{
		k = 1;
		for (int j = 0; j < m; j++) // замена строк, в которых находятся первый и последний минималльные элементы
		{
			temp = a[num_max][j];
			a[num_max][j] = a[num_min][j];
			a[num_min][j] = temp;
		}
	}
} // end swapstr

void sumstrokposit(int** a, int n, int m) // функция суммирует строки, не содержащие отрицательных элементов
{
	int sum, lsum;
	sum = 0;
	for (int i = 0; i < n; i++)
	{
		lsum = 0;
		for (int j = 0; j < m; j++)
		{
			if (a[i][j] >= 0)
			{
				lsum += a[i][j];
			}
			else
			{
				lsum = 0;
				break;
			}
		}
		sum += lsum;
	}
	cout << "сумма элементов строк, не содержащих отрицательных элементов = " << sum << endl;
} // end sumstrokposit
